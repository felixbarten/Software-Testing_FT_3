> module Exercise4 where

> import Lecture5
> import Data.List


The key to erasing blocks in the sudoku generation is to erase them from the node. before minimalization commences. 

However sometimes when removing blocks in a generated sudoku it is declared minimal when no further positions can be removed. 

ignore top 3 blocks

 X | X | X
---|---|---
   |   |
---|---|---
   |   |
   
> ignoretop3Blocks :: [(Row, Column)]
> ignoretop3Blocks = [(r,c)| r <- [1..3], c <-[1..3]]


ignore  3 blocks
   | X |
---|---|---
 X |   |
---|---|---
   | X |
    
> ignore3 :: [(Row, Column)]
> ignore3 = [(r,c)| r <- [1..3], c <-[4..6]] ++ [(r,c)| r <- [4..6], c <-[1..3]] ++  [(r,c)| r <- [7..9], c <-[4..6]]

ignore  4 blocks
   | X |
---|---|---
 X |   | X
---|---|---
   | X |
    
> ignore4 :: [(Row, Column)]
> ignore4 = [(r,c)| r <- [1..3], c <-[4..6]] ++ [(r,c)| r <- [4..6], c <-[1..3]] ++ [(r,c)| r <- [4..6], c <-[7..9]] ++ [(r,c)| r <- [7..9], c <-[4..6]]


ignore 5 blocks
   | X |
---|---|---
 X | X | X
---|---|---
   | X |
    
> ignore5 :: [(Row, Column)]
> ignore5 = [(r,c)| r <- [1..3], c <-[4..6]] ++ 
>           [(r,c)| r <- [4..6], c <-[1..9]] ++ 
>           [(r,c)| r <- [7..9], c <-[4..6]]

ignore 5 blocks
   | X | X
---|---|---
 X |   | X
---|---|---
   | X |
    
> ignore5' :: [(Row, Column)]
> ignore5' = [(r,c)| r <- [1..3], c <-[4..6]] ++ 
>           [(r,c)| r <- [1..3], c <-[7..9]] ++ 
>           [(r,c)| r <- [4..6], c <-[1..3]] ++ 
>           [(r,c)| r <- [4..6], c <-[7..9]] ++ 
>           [(r,c)| r <- [7..9], c <-[4..6]]



> genProblem' :: Node -> [(Row,Column)] -> IO Node
> genProblem' n bs = do ys <- randomize xs
>                       let nod = eraseIgnoredBlocks n bs
>                       showNode nod
>                       return (minimalize nod ys)
>    where xs = filledPositions (fst n)

> eraseIgnoredBlocks :: Node -> [(Row,Column)] -> Node
> eraseIgnoredBlocks n [] = n
> eraseIgnoredBlocks n (p:ps) = eraseIgnoredBlocks (eraseN n p) ps

> main' :: [(Row,Column)] -> IO ()
> main' bs = do [r] <- rsolveNs [emptyN]
>               showNode r
>               s  <- genProblem' r bs
>               showNode s


*Exercise4 Data.List> main' ignore3
+-------+-------+-------+
| 3 8 5 | 9 4 6 | 2 1 7 |
| 1 7 2 | 5 8 3 | 4 9 6 |
| 6 4 9 | 7 1 2 | 3 5 8 |
+-------+-------+-------+
| 8 1 7 | 2 3 9 | 6 4 5 |
| 2 6 3 | 4 7 5 | 1 8 9 |
| 5 9 4 | 8 6 1 | 7 2 3 |
+-------+-------+-------+
| 7 5 6 | 1 2 8 | 9 3 4 |
| 9 3 1 | 6 5 4 | 8 7 2 |
| 4 2 8 | 3 9 7 | 5 6 1 |
+-------+-------+-------+
+-------+-------+-------+
| 3 8 5 |       | 2 1 7 |
| 1 7 2 |       | 4 9 6 |
| 6 4 9 |       | 3 5 8 |
+-------+-------+-------+
|       | 2 3 9 | 6 4 5 |
|       | 4 7 5 | 1 8 9 |
|       | 8 6 1 | 7 2 3 |
+-------+-------+-------+
| 7 5 6 |       | 9 3 4 |
| 9 3 1 |       | 8 7 2 |
| 4 2 8 |       | 5 6 1 |
+-------+-------+-------+
+-------+-------+-------+
| 3 8 5 |       |       |
|       |       | 4 9   |
| 6 4   |       |     8 |
+-------+-------+-------+
|       |   3   | 6     |
|       |   7 5 | 1 8 9 |
|       | 8   1 | 7     |
+-------+-------+-------+
|     6 |       | 9 3   |
|       |       |   7 2 |
| 4 2 8 |       |       |
+-------+-------+-------+
*Exercise4 Data.List>


*Exercise4 Data.List> main' ignore4
+-------+-------+-------+
| 5 3 1 | 6 2 8 | 9 7 4 |
| 2 6 7 | 3 4 9 | 1 5 8 |
| 9 8 4 | 5 1 7 | 6 3 2 |
+-------+-------+-------+
| 3 9 5 | 4 6 1 | 2 8 7 |
| 4 1 8 | 7 3 2 | 5 9 6 |
| 6 7 2 | 8 9 5 | 3 4 1 |
+-------+-------+-------+
| 8 5 9 | 1 7 6 | 4 2 3 |
| 1 2 3 | 9 8 4 | 7 6 5 |
| 7 4 6 | 2 5 3 | 8 1 9 |
+-------+-------+-------+
+-------+-------+-------+
| 5 3 1 |       | 9 7 4 |
| 2 6 7 |       | 1 5 8 |
| 9 8 4 |       | 6 3 2 |
+-------+-------+-------+
|       | 4 6 1 |       |
|       | 7 3 2 |       |
|       | 8 9 5 |       |
+-------+-------+-------+
| 8 5 9 |       | 4 2 3 |
| 1 2 3 |       | 7 6 5 |
| 7 4 6 |       | 8 1 9 |
+-------+-------+-------+
+-------+-------+-------+
| 5 3   |       |     4 |
| 2     |       | 1 5   |
|   8 4 |       | 6   2 |
+-------+-------+-------+
|       | 4   1 |       |
|       | 7     |       |
|       | 8 9 5 |       |
+-------+-------+-------+
|   5   |       |     3 |
| 1     |       | 7     |
| 7 4 6 |       | 8 1   |
+-------+-------+-------+
*Exercise4 Data.List>

*Exercise4 Data.List> main' ignore5
+-------+-------+-------+
| 9 2 5 | 1 8 3 | 7 4 6 |
| 7 1 6 | 5 9 4 | 8 2 3 |
| 3 4 8 | 6 2 7 | 9 5 1 |
+-------+-------+-------+
| 5 6 2 | 8 7 9 | 1 3 4 |
| 8 3 1 | 4 5 2 | 6 9 7 |
| 4 9 7 | 3 6 1 | 5 8 2 |
+-------+-------+-------+
| 1 8 9 | 2 4 6 | 3 7 5 |
| 2 7 3 | 9 1 5 | 4 6 8 |
| 6 5 4 | 7 3 8 | 2 1 9 |
+-------+-------+-------+
+-------+-------+-------+
| 9 2 5 |       | 7 4 6 |
| 7 1 6 |       | 8 2 3 |
| 3 4 8 |       | 9 5 1 |
+-------+-------+-------+
|       |       |       |
|       |       |       |
|       |       |       |
+-------+-------+-------+
| 1 8 9 |       | 3 7 5 |
| 2 7 3 |       | 4 6 8 |
| 6 5 4 |       | 2 1 9 |
+-------+-------+-------+
+-------+-------+-------+
| 9 2 5 |       | 7 4 6 |
| 7 1 6 |       | 8 2 3 |
| 3 4 8 |       | 9 5 1 |
+-------+-------+-------+
|       |       |       |
|       |       |       |
|       |       |       |
+-------+-------+-------+
| 1 8 9 |       | 3 7 5 |
| 2 7 3 |       | 4 6 8 |
| 6 5 4 |       | 2 1 9 |
+-------+-------+-------+
*Exercise4 Data.List>

All 5 empty grid sudoku's of this variety returned the same sudoku after removing the empty grids. Another (unsuccessful) attempt was made..


*Exercise4 Data.List> main' ignore5'
+-------+-------+-------+
| 3 1 5 | 2 6 7 | 9 8 4 |
| 4 7 6 | 9 1 8 | 3 5 2 |
| 9 8 2 | 3 5 4 | 1 6 7 |
+-------+-------+-------+
| 8 9 1 | 7 4 5 | 6 2 3 |
| 6 5 3 | 8 2 1 | 7 4 9 |
| 7 2 4 | 6 9 3 | 5 1 8 |
+-------+-------+-------+
| 5 4 7 | 1 8 9 | 2 3 6 |
| 2 3 8 | 5 7 6 | 4 9 1 |
| 1 6 9 | 4 3 2 | 8 7 5 |
+-------+-------+-------+
+-------+-------+-------+
| 3 1 5 |       |       |
| 4 7 6 |       |       |
| 9 8 2 |       |       |
+-------+-------+-------+
|       | 7 4 5 |       |
|       | 8 2 1 |       |
|       | 6 9 3 |       |
+-------+-------+-------+
| 5 4 7 |       | 2 3 6 |
| 2 3 8 |       | 4 9 1 |
| 1 6 9 |       | 8 7 5 |
+-------+-------+-------+
+-------+-------+-------+
| 3 1 5 |       |       |
| 4 7 6 |       |       |
| 9 8 2 |       |       |
+-------+-------+-------+
|       | 7 4 5 |       |
|       | 8 2 1 |       |
|       | 6 9 3 |       |
+-------+-------+-------+
| 5 4 7 |       | 2 3 6 |
| 2 3 8 |       | 4 9 1 |
| 1 6 9 |       | 8 7 5 |
+-------+-------+-------+
*Exercise4 Data.List>


With the same outcome.